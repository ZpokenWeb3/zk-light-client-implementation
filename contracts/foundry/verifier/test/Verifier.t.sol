// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

import "forge-std/Test.sol";
import "../src/Verifier.sol";

contract VerifierTest is Test {
    Verifier public verifier;

    uint256[4] public inputs;
    uint256[8] public proof;
    uint256[4] public incorrectInputs;
    uint256[8] public incorrectProof;

    function setUp() public {
        verifier = new Verifier();

        inputs = [
            946114226032418920967126594582827844,
            252211404666022190610388135805056990747,
            250203699874957393754930603326313200955,
            294168951901226811933587358204780889671
        ];

        proof = [
            20464050077523708468717972999901463052800902965454856493835897293382763588739,
            13694922551730550929138384526725364508859601738118930886570695639930722819162,
            9726809289225231716602256724952078482414049108299231512500201224134287347761,
            21249544778861590267354055219725876020735719608117785239266086615373770363585,
            14417263863291208274495711595104598247782764532555780227831538548449523215877,
            5860870952312631648769655284254683182816999556669718506510079433303444943620,
            16184563987138570578412068350203120407719621917941775542704351564218862151903,
            4474689186470635657363000670899869682999313450066055139011940476920656162485
        ];

        incorrectInputs = [
            946114226032418920967126594582827840,
            252211404666022190610388135805056990740,
            250203699874957393754930603326313200950,
            294168951901226811933587358204780889670
        ];

        incorrectProof = [
            6302162678823841200396915311228777342524310647178952242621209430860606417870,
            5688874101604422809062392686067769974466336383547871872297604857481113209310,
            13067201362306888280420276685585448577630319898210624528091944232563639673900,
            15253040417767205464665745126190612115773771949281934081886164082116687122180,
            1286287796680172736180296629792415589426353119726353867523801064677953938380,
            10072443203863058952492408939658944706911871289381911835060263441184101246870,
            13594152181780533529094098669508003919098231319348108349232488431856536079740,
            19991156839958621917471713965247457880542796239191147501866226782529365125610
        ];
    }

    function testSuccessfulVerifyProof() public view {
        verifier.verifyProof(proof, inputs);
    }

    function testSuccessfulVerifyCompressedProof() public view {
        uint256[4] memory compressedProof = verifier.compressProof(proof);
        verifier.verifyCompressedProof(compressedProof, inputs);
    }

    function testIncorrectProof() public {
        vm.expectRevert(Verifier.ProofInvalid.selector);
        verifier.verifyProof(proof, incorrectInputs);

        vm.expectRevert(Verifier.ProofInvalid.selector);
        verifier.verifyProof(incorrectProof, inputs);
    }
}
